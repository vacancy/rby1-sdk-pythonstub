import datetime
import numpy
from typing import Callable, ClassVar, overload

class ArmCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: JointPositionCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: GravityCompensationCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: CartesianCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: ImpedanceControlCommandBuilder) -> None: ...
    @overload
    def set_command(self, arg0: JointPositionCommandBuilder) -> ArmCommandBuilder: ...
    @overload
    def set_command(self, arg0: GravityCompensationCommandBuilder) -> ArmCommandBuilder: ...
    @overload
    def set_command(self, arg0: CartesianCommandBuilder) -> ArmCommandBuilder: ...
    @overload
    def set_command(self, arg0: ImpedanceControlCommandBuilder) -> ArmCommandBuilder: ...

class ArmCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def cartesian_command(self) -> CartesianCommandFeedback: ...
    @property
    def gravity_compensation_command(self) -> GravityCompensationCommandFeedback: ...
    @property
    def impedance_control_command(self) -> ImpedanceControlCommandFeedback: ...
    @property
    def joint_position_command(self) -> JointPositionCommandFeedback: ...

class BatteryInfo:
    def __init__(self) -> None: ...

class BatteryState:
    def __init__(self) -> None: ...
    @property
    def current(self) -> float: ...
    @property
    def level_percent(self) -> float: ...
    @property
    def voltage(self) -> float: ...

class BodyCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: JointPositionCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: OptimalControlCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: GravityCompensationCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: CartesianCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: BodyComponentBasedCommandBuilder) -> None: ...
    @overload
    def set_command(self, arg0: JointPositionCommandBuilder) -> BodyCommandBuilder: ...
    @overload
    def set_command(self, arg0: OptimalControlCommandBuilder) -> BodyCommandBuilder: ...
    @overload
    def set_command(self, arg0: GravityCompensationCommandBuilder) -> BodyCommandBuilder: ...
    @overload
    def set_command(self, arg0: CartesianCommandBuilder) -> BodyCommandBuilder: ...
    @overload
    def set_command(self, arg0: BodyComponentBasedCommandBuilder) -> BodyCommandBuilder: ...

class BodyCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def body_component_based_command(self) -> BodyComponentBasedCommandFeedback: ...
    @property
    def cartesian_command(self) -> CartesianCommandFeedback: ...
    @property
    def gravity_compensation_command(self) -> GravityCompensationCommandFeedback: ...
    @property
    def joint_position_command(self) -> JointPositionCommandFeedback: ...
    @property
    def optimal_control_command(self) -> OptimalControlCommandFeedback: ...

class BodyComponentBasedCommandBuilder:
    def __init__(self) -> None: ...
    def set_left_arm_command(self, arg0: ArmCommandBuilder) -> BodyComponentBasedCommandBuilder: ...
    def set_right_arm_command(self, arg0: ArmCommandBuilder) -> BodyComponentBasedCommandBuilder: ...
    def set_torso_command(self, arg0: TorsoCommandBuilder) -> BodyComponentBasedCommandBuilder: ...

class BodyComponentBasedCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def left_arm_command(self) -> ArmCommandFeedback: ...
    @property
    def right_arm_command(self) -> ArmCommandFeedback: ...
    @property
    def torso_command(self) -> TorsoCommandFeedback: ...

class CartesianCommandBuilder:
    def __init__(self) -> None: ...
    def add_target(self, arg0: str, arg1: str, arg2: numpy.ndarray[numpy.float64[4, 4]], arg3: float, arg4: float, arg5: float) -> CartesianCommandBuilder: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> CartesianCommandBuilder: ...
    def set_minimum_time(self, arg0: float) -> CartesianCommandBuilder: ...
    def set_stop_orientation_tracking_error(self, arg0: float) -> CartesianCommandBuilder: ...
    def set_stop_position_tracking_error(self, arg0: float) -> CartesianCommandBuilder: ...

class CartesianCommandFeedback(CommandFeedback):
    class TrackingError:
        def __init__(self) -> None: ...
        @property
        def position_error(self) -> float: ...
        @property
        def rotation_error(self) -> float: ...
    def __init__(self) -> None: ...
    @property
    def tracking_errors(self) -> list[CartesianCommandFeedback.TrackingError]: ...

class CommandFeedback(Feedback):
    def __init__(self) -> None: ...
    @property
    def command_header(self) -> CommandHeaderFeedback: ...

class CommandHeaderBuilder:
    def __init__(self) -> None: ...
    def add_inertial(self, arg0: str, arg1: numpy.ndarray[numpy.float64[6, 6]]) -> CommandHeaderBuilder: ...
    def set_control_hold_time(self, arg0: float) -> CommandHeaderBuilder: ...
    def set_gravity(self, arg0: numpy.ndarray[numpy.float64[3, 1]]) -> CommandHeaderBuilder: ...

class CommandHeaderFeedback(Feedback):
    def __init__(self) -> None: ...
    @property
    def finished(self) -> bool: ...

class ComponentBasedCommandBuilder:
    def __init__(self) -> None: ...
    def set_body_command(self, arg0: BodyCommandBuilder) -> ComponentBasedCommandBuilder: ...
    def set_head_command(self, arg0: HeadCommandBuilder) -> ComponentBasedCommandBuilder: ...
    def set_mobility_command(self, arg0: MobilityCommandBuilder) -> ComponentBasedCommandBuilder: ...

class ComponentBasedCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def body_command(self) -> BodyCommandFeedback: ...
    @property
    def head_command(self) -> HeadCommandFeedback: ...
    @property
    def mobility_command(self) -> MobilityCommandFeedback: ...

class ControlManagerState:
    class ControlState:
        __members__: ClassVar[dict] = ...  # read-only
        Executing: ClassVar[ControlManagerState.ControlState] = ...
        Idle: ClassVar[ControlManagerState.ControlState] = ...
        Switching: ClassVar[ControlManagerState.ControlState] = ...
        Unknown: ClassVar[ControlManagerState.ControlState] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class State:
        __members__: ClassVar[dict] = ...  # read-only
        Enabled: ClassVar[ControlManagerState.State] = ...
        Idle: ClassVar[ControlManagerState.State] = ...
        MajorFault: ClassVar[ControlManagerState.State] = ...
        MinorFault: ClassVar[ControlManagerState.State] = ...
        Unknown: ClassVar[ControlManagerState.State] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self) -> None: ...
    @property
    def control_state(self) -> ControlManagerState.ControlState: ...
    @property
    def enabled_joint_idx(self) -> list[int]: ...
    @property
    def state(self) -> ControlManagerState.State: ...
    @property
    def time_scale(self) -> float: ...
    @property
    def unlimited_mode_enabled(self) -> bool: ...

class EMOInfo:
    def __init__(self) -> None: ...
    @property
    def name(self) -> str: ...

class EMOState:
    class State:
        __members__: ClassVar[dict] = ...  # read-only
        Pressed: ClassVar[EMOState.State] = ...
        Released: ClassVar[EMOState.State] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self) -> None: ...
    @property
    def state(self) -> EMOState.State: ...

class FTSensorData:
    def __init__(self) -> None: ...
    @property
    def force(self) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    @property
    def time_since_last_update(self) -> datetime.timedelta: ...
    @property
    def torque(self) -> numpy.ndarray[numpy.float64[3, 1]]: ...

class Feedback:
    def __init__(self) -> None: ...
    @property
    def valid(self) -> bool: ...

class GravityCompensationCommandBuilder:
    def __init__(self) -> None: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> GravityCompensationCommandBuilder: ...
    def set_on(self, arg0: bool) -> GravityCompensationCommandBuilder: ...

class GravityCompensationCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...

class HeadCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: JointPositionCommandBuilder) -> None: ...
    def set_command(self, arg0: JointPositionCommandBuilder) -> HeadCommandBuilder: ...

class HeadCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def joint_position_command(self) -> JointPositionCommandFeedback: ...

class ImpedanceControlCommandBuilder:
    def __init__(self) -> None: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> ImpedanceControlCommandBuilder: ...
    def set_link_name(self, arg0: str) -> ImpedanceControlCommandBuilder: ...
    def set_reference_link_name(self, arg0: str) -> ImpedanceControlCommandBuilder: ...
    def set_rotation_weight(self, arg0: numpy.ndarray[numpy.float64[3, 1]]) -> ImpedanceControlCommandBuilder: ...
    def set_transformation(self, arg0: numpy.ndarray[numpy.float64[4, 4]]) -> ImpedanceControlCommandBuilder: ...
    def set_translation_weight(self, arg0: numpy.ndarray[numpy.float64[3, 1]]) -> ImpedanceControlCommandBuilder: ...

class ImpedanceControlCommandFeedback(CommandFeedback):
    class TrackingError:
        def __init__(self) -> None: ...
        @property
        def position_error(self) -> float: ...
        @property
        def rotation_error(self) -> float: ...
    def __init__(self) -> None: ...
    @property
    def tracking_error(self) -> ImpedanceControlCommandFeedback.TrackingError: ...

class JogCommandBuilder:
    class AbsolutePosition:
        def __init__(self, arg0: float) -> None: ...
        def value(self) -> float: ...

    class OneStep:
        def __init__(self, arg0: float) -> None: ...
        def value(self) -> bool: ...

    class RelativePosition:
        def __init__(self, arg0: float) -> None: ...
        def value(self) -> float: ...
    def __init__(self) -> None: ...
    def set_acceleration_limit(self, arg0: float) -> JogCommandBuilder: ...
    @overload
    def set_command(self, arg0: JogCommandBuilder.AbsolutePosition) -> JogCommandBuilder: ...
    @overload
    def set_command(self, arg0: JogCommandBuilder.RelativePosition) -> JogCommandBuilder: ...
    @overload
    def set_command(self, arg0: JogCommandBuilder.OneStep) -> JogCommandBuilder: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> JogCommandBuilder: ...
    def set_joint_name(self, arg0: str) -> JogCommandBuilder: ...
    def set_velocity_limit(self, arg0: float) -> JogCommandBuilder: ...

class JogCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def target_joint_name(self) -> str: ...

class JointInfo:
    def __init__(self) -> None: ...
    @property
    def has_brake(self) -> bool: ...
    @property
    def name(self) -> str: ...

class JointPositionCommandBuilder:
    def __init__(self) -> None: ...
    def set_acceleration_limit(self, arg0: numpy.ndarray[numpy.float64[m, 1]]) -> JointPositionCommandBuilder: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> JointPositionCommandBuilder: ...
    def set_minimum_time(self, arg0: float) -> JointPositionCommandBuilder: ...
    def set_position(self, arg0: numpy.ndarray[numpy.float64[m, 1]]) -> JointPositionCommandBuilder: ...
    def set_velocity_limit(self, arg0: numpy.ndarray[numpy.float64[m, 1]]) -> JointPositionCommandBuilder: ...

class JointPositionCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...

class JointState:
    class FETState:
        __members__: ClassVar[dict] = ...  # read-only
        Off: ClassVar[JointState.FETState] = ...
        On: ClassVar[JointState.FETState] = ...
        Unknown: ClassVar[JointState.FETState] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class InitializationState:
        __members__: ClassVar[dict] = ...  # read-only
        Unknown: ClassVar[JointState.InitializationState] = ...
        __entries: ClassVar[dict] = ...
        kInitialized: ClassVar[JointState.InitializationState] = ...
        kUninitialized: ClassVar[JointState.InitializationState] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class RunState:
        __members__: ClassVar[dict] = ...  # read-only
        ControlOff: ClassVar[JointState.RunState] = ...
        ControlOn: ClassVar[JointState.RunState] = ...
        Unknown: ClassVar[JointState.RunState] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self) -> None: ...
    @property
    def current(self) -> float: ...
    @property
    def fet_state(self) -> JointState.FETState: ...
    @property
    def init_state(self) -> JointState.InitializationState: ...
    @property
    def is_ready(self) -> bool: ...
    @property
    def motor_state(self) -> int: ...
    @property
    def motor_type(self) -> int: ...
    @property
    def position(self) -> float: ...
    @property
    def power_on(self) -> bool: ...
    @property
    def run_state(self) -> JointState.RunState: ...
    @property
    def target_feedback_gain(self) -> int: ...
    @property
    def target_feedforward_torque(self) -> float: ...
    @property
    def target_position(self) -> float: ...
    @property
    def target_velocity(self) -> float: ...
    @property
    def time_since_last_update(self) -> datetime.timedelta: ...
    @property
    def torque(self) -> float: ...
    @property
    def velocity(self) -> float: ...

class JointVelocityCommandBuilder:
    def __init__(self) -> None: ...
    def set_acceleration_limit(self, arg0: numpy.ndarray[numpy.float64[m, 1]]) -> JointVelocityCommandBuilder: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> JointVelocityCommandBuilder: ...
    def set_minimum_time(self, arg0: float) -> JointVelocityCommandBuilder: ...
    def set_velocity(self, arg0: numpy.ndarray[numpy.float64[m, 1]]) -> JointVelocityCommandBuilder: ...

class JointVelocityCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...

class Log:
    class Level:
        __members__: ClassVar[dict] = ...  # read-only
        Critical: ClassVar[Log.Level] = ...
        Debug: ClassVar[Log.Level] = ...
        Error: ClassVar[Log.Level] = ...
        Info: ClassVar[Log.Level] = ...
        Trace: ClassVar[Log.Level] = ...
        Warn: ClassVar[Log.Level] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self) -> None: ...
    @property
    def level(self) -> Log.Level: ...
    @property
    def message(self) -> str: ...
    @property
    def robot_system_timestamp(self) -> datetime.datetime: ...
    @property
    def timestamp(self) -> datetime.datetime: ...

class MobilityCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: JointVelocityCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: SE2VelocityCommandBuilder) -> None: ...
    @overload
    def set_command(self, arg0: JointVelocityCommandBuilder) -> MobilityCommandBuilder: ...
    @overload
    def set_command(self, arg0: SE2VelocityCommandBuilder) -> MobilityCommandBuilder: ...

class MobilityCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def joint_velocity_command(self) -> JointVelocityCommandFeedback: ...
    @property
    def se2_velocity_command(self) -> SE2VelocityCommandFeedback: ...

class Model_A:
    def __init__(self) -> None: ...
    @property
    def body_idx(self): ...
    @property
    def control_period(self) -> float: ...
    @property
    def head_idx(self): ...
    @property
    def left_arm_idx(self): ...
    @property
    def mobility_idx(self): ...
    @property
    def model_name(self) -> str: ...
    @property
    def right_arm_idx(self): ...
    @property
    def robot_dof(self) -> int: ...
    @property
    def robot_joint_names(self): ...
    @property
    def torso_idx(self): ...
    @property
    def velocity_estimation_required_idx(self): ...

class OptimalControlCommandBuilder:
    def __init__(self) -> None: ...
    def add_cartesian_target(self, arg0: str, arg1: str, arg2: numpy.ndarray[numpy.float64[4, 4]], arg3: float, arg4: float) -> OptimalControlCommandBuilder: ...
    def add_joint_position_target(self, arg0: str, arg1: float, arg2: float) -> OptimalControlCommandBuilder: ...
    def set_center_of_mass_target(self, arg0: str, arg1: numpy.ndarray[numpy.float64[3, 1]], arg2: float) -> OptimalControlCommandBuilder: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> OptimalControlCommandBuilder: ...
    def set_min_delta_cost(self, arg0: float) -> OptimalControlCommandBuilder: ...
    def set_patience(self, arg0: int) -> OptimalControlCommandBuilder: ...
    def set_stop_cost(self, arg0: float) -> OptimalControlCommandBuilder: ...
    def set_velocity_limit_scaling(self, arg0: float) -> OptimalControlCommandBuilder: ...
    def set_velocity_tracking_gain(self, arg0: float) -> OptimalControlCommandBuilder: ...

class OptimalControlCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def cartesian_costs(self) -> list[float]: ...
    @property
    def center_of_mass_cost(self) -> float: ...
    @property
    def joint_position_costs(self) -> list[float]: ...
    @property
    def total_cost(self) -> float: ...

class PowerInfo:
    def __init__(self) -> None: ...
    @property
    def name(self) -> str: ...

class PowerState:
    class State:
        __members__: ClassVar[dict] = ...  # read-only
        PowerOff: ClassVar[PowerState.State] = ...
        PowerOn: ClassVar[PowerState.State] = ...
        Unknown: ClassVar[PowerState.State] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self) -> None: ...
    @property
    def state(self) -> PowerState.State: ...
    @property
    def voltage(self) -> float: ...

class RobotCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: WholeBodyCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: ComponentBasedCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: JogCommandBuilder) -> None: ...
    @overload
    def set_command(self, arg0: WholeBodyCommandBuilder) -> RobotCommandBuilder: ...
    @overload
    def set_command(self, arg0: ComponentBasedCommandBuilder) -> RobotCommandBuilder: ...
    @overload
    def set_command(self, arg0: JogCommandBuilder) -> RobotCommandBuilder: ...

class RobotCommandFeedback(CommandFeedback):
    class FinishCode:
        __members__: ClassVar[dict] = ...  # read-only
        Canceled: ClassVar[RobotCommandFeedback.FinishCode] = ...
        ControlManagerFault: ClassVar[RobotCommandFeedback.FinishCode] = ...
        ControlManagerIdle: ClassVar[RobotCommandFeedback.FinishCode] = ...
        InitializedFailed: ClassVar[RobotCommandFeedback.FinishCode] = ...
        Ok: ClassVar[RobotCommandFeedback.FinishCode] = ...
        Preempted: ClassVar[RobotCommandFeedback.FinishCode] = ...
        UnexpectedState: ClassVar[RobotCommandFeedback.FinishCode] = ...
        Unknown: ClassVar[RobotCommandFeedback.FinishCode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class Status:
        __members__: ClassVar[dict] = ...  # read-only
        Finished: ClassVar[RobotCommandFeedback.Status] = ...
        Idle: ClassVar[RobotCommandFeedback.Status] = ...
        Initializing: ClassVar[RobotCommandFeedback.Status] = ...
        Running: ClassVar[RobotCommandFeedback.Status] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self) -> None: ...
    @property
    def component_based_command(self) -> ComponentBasedCommandFeedback: ...
    @property
    def finish_code(self) -> RobotCommandFeedback.FinishCode: ...
    @property
    def jog_command(self) -> JogCommandFeedback: ...
    @property
    def status(self) -> RobotCommandFeedback.Status: ...
    @property
    def whole_body_command(self) -> WholeBodyCommandFeedback: ...

class RobotInfo:
    def __init__(self) -> None: ...
    @property
    def battery_info(self) -> BatteryInfo: ...
    @property
    def body_joint_idx(self) -> list[int]: ...
    @property
    def degree_of_freedom(self) -> int: ...
    @property
    def emo_infos(self) -> list[EMOInfo]: ...
    @property
    def head_joint_idx(self) -> list[int]: ...
    @property
    def joint_infos(self) -> list[JointInfo]: ...
    @property
    def mobility_joint_idx(self) -> list[int]: ...
    @property
    def power_infos(self) -> list[PowerInfo]: ...
    @property
    def robot_version(self) -> str: ...
    @property
    def sdk_commit_id(self) -> str: ...

class RobotState_A:
    def __init__(self) -> None: ...
    @property
    def battery_state(self) -> BatteryState: ...
    @property
    def center_of_mass(self) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    @property
    def collisions(self) -> list[dynamics.CollisionResult]: ...
    @property
    def current(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def emo_states(self) -> list[EMOState]: ...
    @property
    def ft_sensor_left(self) -> FTSensorData: ...
    @property
    def ft_sensor_right(self) -> FTSensorData: ...
    @property
    def is_ready(self) -> numpy.ndarray[bool[24, 1]]: ...
    @property
    def joint_states(self): ...
    @property
    def odometry(self) -> numpy.ndarray[numpy.float64[3, 3]]: ...
    @property
    def position(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def power_states(self) -> list[PowerState]: ...
    @property
    def system_stat(self) -> SystemStat: ...
    @property
    def target_feedback_gain(self) -> numpy.ndarray[numpy.uint32[24, 1]]: ...
    @property
    def target_feedforward_torque(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def target_position(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def target_velocity(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def timestamp(self) -> datetime.datetime: ...
    @property
    def tool_flange_left(self) -> ToolFlangeState: ...
    @property
    def tool_flange_right(self) -> ToolFlangeState: ...
    @property
    def torque(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def velocity(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...

class Robot_A:
    def __init__(self, *args, **kwargs) -> None: ...
    def connect(self, max_retries: int = ..., timeout_ms: int = ...) -> bool: ...
    def control(self, control: Callable[[Robot_A_ControlState], Robot_A_ControlInput], port: int = ..., priority: int = ...) -> bool: ...
    @staticmethod
    def create(arg0: str) -> Robot_A: ...
    def create_command_stream(self, priority: int = ...) -> Robot_A_CommandStreamHandler: ...
    def disable_control_manager(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enable_control_manager(self, unlimited_mode_enabled: bool = ...) -> bool: ...
    def get_control_manager_state(self) -> ControlManagerState: ...
    def get_dynamics(self, urdf_model: str = ...) -> dynamics.Robot_24: ...
    def get_last_log(self, count: int) -> list[Log]: ...
    def get_parameter(self, name: str) -> str: ...
    def get_parameter_list(self) -> list[tuple[str, int]]: ...
    def get_robot_info(self) -> RobotInfo: ...
    def get_robot_model(self) -> str: ...
    def get_state(self) -> RobotState_A: ...
    def get_time_scale(self) -> float: ...
    def has_established_time_sync(self) -> bool: ...
    def import_robot_model(self, name: str, model: str) -> bool: ...
    def is_connected(self) -> bool: ...
    def is_power_on(self, dev_name: str) -> bool: ...
    def is_servo_on(self, dev_name: str) -> bool: ...
    def power_off(self, dev_name: str) -> bool: ...
    def power_on(self, dev_name: str) -> bool: ...
    def reset_all_parameters_to_default(self) -> None: ...
    def reset_fault_control_manager(self) -> bool: ...
    def reset_odometry(self, angle: float, position: numpy.ndarray[numpy.float64[2, 1]]) -> bool: ...
    def reset_parameter_to_default(self, name: str) -> bool: ...
    def send_command(self, builder: RobotCommandBuilder, priority: int = ...) -> Robot_A_CommandHandler: ...
    def servo_on(self, dev_name: str) -> bool: ...
    def set_parameter(self, name: str, value: str) -> bool: ...
    def set_time_scale(self, time_scale: float) -> float: ...
    def set_tool_flange_output_voltage(self, arg0: str, arg1: int) -> bool: ...
    def start_log_stream(self, cb: Callable[[list[Log]], None], rate: float) -> None: ...
    def start_state_update(self, cb: Callable[[RobotState_A], None], rate: float) -> None: ...
    def start_time_sync(self, period_sec: int) -> bool: ...
    def stop_log_stream(self) -> None: ...
    def stop_state_update(self) -> None: ...
    def stop_time_sync(self) -> bool: ...
    def sync_time(self) -> bool: ...

class Robot_A_CommandHandler:
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self) -> None: ...
    def get(self) -> RobotCommandFeedback: ...
    def get_status(self) -> bool: ...
    def is_done(self) -> bool: ...
    def wait(self) -> None: ...
    def wait_for(self, timeout_ms: int) -> bool: ...

class Robot_A_CommandStreamHandler:
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self) -> None: ...
    def is_done(self) -> bool: ...
    def request_feedback(self, timeout_ms: int = ...) -> RobotCommandFeedback: ...
    def send_command(self, builder: RobotCommandBuilder, timeout_ms: int = ...) -> RobotCommandFeedback: ...
    def wait(self) -> None: ...
    def wait_for(self, timeout_ms: int) -> bool: ...

class Robot_A_ControlInput:
    feedback_gain: numpy.ndarray[numpy.uint32[24, 1]]
    feedforward_torque: numpy.ndarray[numpy.float64[24, 1]]
    finish: bool
    mode: numpy.ndarray[bool[24, 1]]
    target: numpy.ndarray[numpy.float64[24, 1]]
    def __init__(self) -> None: ...

class Robot_A_ControlState:
    def __init__(self) -> None: ...
    @property
    def current(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def is_ready(self) -> numpy.ndarray[bool[24, 1]]: ...
    @property
    def position(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def t(self) -> float: ...
    @property
    def torque(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...
    @property
    def velocity(self) -> numpy.ndarray[numpy.float64[24, 1]]: ...

class SE2VelocityCommandBuilder:
    def __init__(self) -> None: ...
    def set_acceleration_limit(self, arg0: numpy.ndarray[numpy.float64[2, 1]], arg1: float) -> SE2VelocityCommandBuilder: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> SE2VelocityCommandBuilder: ...
    def set_minimum_time(self, arg0: float) -> SE2VelocityCommandBuilder: ...
    def set_velocity(self, arg0: numpy.ndarray[numpy.float64[2, 1]], arg1: float) -> SE2VelocityCommandBuilder: ...

class SE2VelocityCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...

class StopCommandBuilder:
    def __init__(self) -> None: ...
    def set_command_header(self, arg0: CommandHeaderBuilder) -> StopCommandBuilder: ...

class StopCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...

class SystemStat:
    def __init__(self) -> None: ...
    @property
    def cpu_usage(self) -> float: ...
    @property
    def memory_usage(self) -> float: ...
    @property
    def program_uptime(self) -> float: ...
    @property
    def uptime(self) -> float: ...

class ToolFlangeState:
    def __init__(self) -> None: ...
    @property
    def acceleration(self) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    @property
    def gyro(self) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    @property
    def output_voltage(self) -> int: ...
    @property
    def switch_A(self) -> bool: ...
    @property
    def time_since_last_update(self) -> datetime.timedelta: ...

class TorsoCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: JointPositionCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: GravityCompensationCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: CartesianCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: ImpedanceControlCommandBuilder) -> None: ...
    @overload
    def __init__(self, arg0: OptimalControlCommandBuilder) -> None: ...
    @overload
    def set_command(self, arg0: JointPositionCommandBuilder) -> TorsoCommandBuilder: ...
    @overload
    def set_command(self, arg0: GravityCompensationCommandBuilder) -> TorsoCommandBuilder: ...
    @overload
    def set_command(self, arg0: CartesianCommandBuilder) -> TorsoCommandBuilder: ...
    @overload
    def set_command(self, arg0: ImpedanceControlCommandBuilder) -> TorsoCommandBuilder: ...
    @overload
    def set_command(self, arg0: OptimalControlCommandBuilder) -> TorsoCommandBuilder: ...

class TorsoCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def cartesian_command(self) -> CartesianCommandFeedback: ...
    @property
    def gravity_compensation_command(self) -> GravityCompensationCommandFeedback: ...
    @property
    def impedance_control_command(self) -> ImpedanceControlCommandFeedback: ...
    @property
    def joint_position_command(self) -> JointPositionCommandFeedback: ...
    @property
    def optimal_control_command(self) -> OptimalControlCommandFeedback: ...

class WholeBodyCommandBuilder:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: StopCommandBuilder) -> None: ...
    def set_command(self, arg0: StopCommandBuilder) -> WholeBodyCommandBuilder: ...

class WholeBodyCommandFeedback(CommandFeedback):
    def __init__(self) -> None: ...
    @property
    def stop_command(self) -> StopCommandFeedback: ...

def create_robot(model: object, address: str) -> object: ...
def create_robot_a(address: str) -> Robot_A: ...
